import Foundation
import PlaygroundSupport

/**
 #Â AsyncAwaitDemo
 
 A simple example of using Async, Await, Task
 
 Async, await makes it easier to write asynchronous code

 - Async requires the usage of await when called
 - Use Task { ... } to run async code
 
 ## Notes on Sendable
 
### What is Sendable in Swift?
Sendable is a protocol introduced in Swift to indicate that a type can be safely sent across actor boundaries in concurrent programming. It is essential for maintaining data integrity in a multi-threaded environment.

### What does @unchecked Sendable mean?
Using @unchecked Sendable means the developer guarantees the type's thread safety without the compiler's verification. This should be used with caution as it bypasses some safety checks provided by Swift.

The warning about @unchecked Sendable arises because Swift enforces stricter checks for thread safety in concurrent programming.

It's not advisable to ignore this warning, as doing so could lead to data races or crashes in concurrent environments. Always strive for thread-safe code and address compiler warnings accordingly.



  The data is from MockData.md
 
 //   Demo #1 - Simple awaiting with blocking
 //   Demo #2 - Simple non-blocking example

 */

enum Department: String {
    case sales, engineering, humanResources
}

struct Sale: Hashable {
    let amount: Double
}

// removed: @unchecked Sendable
// this is because in this demo, the employee is immutable, so we use a struct for better concurrency safety.
struct Employee: Hashable, CustomStringConvertible {
    private let id: Int
    let name: String
    let role: String
    let department: Department
    let sales: [Sale]
    
    init(id: Int, name: String, role: String, department: Department, sales: [Sale] = []) {
        self.id = id
        self.name = name
        self.role = role
        self.department = department
        self.sales = sales
    }
    
    /// Total sales generated by this employee
    var totalSales: Double {
        sales.reduce(0.0) { $0 + $1.amount }
    }
    
    /// Custom String Convertible comformance
    var description: String { return self.name }
    
    func hash(into hasher: inout Hasher) {
        hasher.combine(self.id)
    }
    
    static func == (lhs: Employee, rhs: Employee) -> Bool {
        return (lhs.id == rhs.id)
    }
}

func fetchData() async -> [Employee] {
 
    /*
     // Note: Date is not in this demo
    | Sale ID | Amount | Date       | Employee     |
    | ------- | ------ | ---------- | ------------ |
    | S001    | 15,000 | 2024-12-01 | Alice Martin |
    | S002    | 9,500  | 2025-01-15 | Eve Summers  |
    | S003    | 12,000 | 2025-02-01 | Alice Martin |
    | S004    | 7,500  | 2025-03-10 | Eve Summers  |
    | S005    | 5,000  | 2025-04-05 | Alice Martin |
    */

    /// Create employees
    let employees = [
        Employee(id: 1, name: "Alice Martin", role: "Sales Manager", department: .sales, sales: [Sale(amount: 15_000), Sale(amount: 12_000)]),
        Employee(id: 2, name: "Bob Sanchez", role: "Software Engineer", department: .engineering, sales: []),
        Employee(id: 3, name: "Carol White", role: "HR Coordinator", department: .humanResources, sales: []),
        Employee(id: 4, name: "David Chen", role: "QA Engineer", department: .engineering, sales: []),
        Employee(id: 5, name: "Eve Summers", role: "Account Executive", department: .sales
                 , sales: [Sale(amount: 9_500), Sale(amount: 5_000)]),
    ]
    
    ///A 1-second delay using await
    try? await Task.sleep(nanoseconds: 1_000_000_000)
    
    return employees
}

// MARK: Demo #1 - Simple awaiting with blocking

print ("Demo #1 - Simple awaiting with blocking")
print ("\n--------------------\n")

let task = Task {
    
    print("Fetching the data...")
    let employees = await fetchData()
    print("[x] Completed")
    
    // Display all employees
    print("\nEmployee List:")
    for employee in employees {
        print("- \(employee.name), \(employee.role) (\(employee.department))")
        if employee.sales.count > 0 {
            print("  Total Sales: $\(String(format: "%.2f", employee.totalSales))")
        }
    }
    
    return employees
}

print("Waiting for async task to complete...")

// This will block until the task completes
let employees = await task.value

print("Total employees: \(employees.count)")


print ("\n--------------------\n")

// MARK: Demo #2 - Simple non-blocking example

print ("Demo #2 - Simple non-blocking example")
print ("\n--------------------\n")

print ("-TBC-")

print ("\n--------------------\n")

print("\n\n-- Exiting Playground -- ")
PlaygroundPage.current.finishExecution()

